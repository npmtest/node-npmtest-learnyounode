{"/home/travis/build/npmtest/node-npmtest-learnyounode/test.js":"/* istanbul instrument in package npmtest_learnyounode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-learnyounode/lib.npmtest_learnyounode.js":"/* istanbul instrument in package npmtest_learnyounode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_learnyounode = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_learnyounode = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-learnyounode/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-learnyounode && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_learnyounode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_learnyounode\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_learnyounode.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_learnyounode.rollup.js'] =\n            local.assetsDict['/assets.npmtest_learnyounode.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_learnyounode.__dirname + '/lib.npmtest_learnyounode.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-learnyounode/node_modules/learnyounode/learnyounode.js":"const learnyounode = require('workshopper-adventure')({\n  appDir: __dirname,\n  languages: ['en', 'es', 'fr', 'ja', 'zh-cn', 'zh-tw', 'pt-br', 'ru', 'uk', 'vi', 'ko', 'nb-no', 'it'],\n  header: require('workshopper-adventure/default/header'),\n  footer: require('workshopper-adventure/default/footer'),\n  fail: require('workshopper-adventure/default/fail'),\n  pass: require('workshopper-adventure/default/pass')\n})\n\nlearnyounode.addAll([\n  'HELLO WORLD',\n  'BABY STEPS',\n  'MY FIRST I/O!',\n  'MY FIRST ASYNC I/O!',\n  'FILTERED LS',\n  'MAKE IT MODULAR',\n  'HTTP CLIENT',\n  'HTTP COLLECT',\n  'JUGGLING ASYNC',\n  'TIME SERVER',\n  'HTTP FILE SERVER',\n  'HTTP UPPERCASERER',\n  'HTTP JSON API SERVER'\n])\n\nmodule.exports = learnyounode\n","/home/travis/build/npmtest/node-npmtest-learnyounode/node_modules/learnyounode/lib/rndport.js":"module.exports = function rndport () {\n  return 1024 + Math.floor(Math.random() * 64511)\n}\n","/home/travis/build/npmtest/node-npmtest-learnyounode/node_modules/learnyounode/exercises/baby_steps/exercise.js":"var exercise = require('workshopper-exercise')()\nvar filecheck = require('workshopper-exercise/filecheck')\nvar execute = require('workshopper-exercise/execute')\nvar comparestdout = require('workshopper-exercise/comparestdout')\n\n// checks that the submission file actually exists\nexercise = filecheck(exercise)\n\n// execute the solution and submission in parallel with spawn()\nexercise = execute(exercise)\n\n// compare stdout of solution and submission\nexercise = comparestdout(exercise)\n\n// generate a random positive integer <= 100\n\nfunction rndint () {\n  return Math.ceil(Math.random() * 100)\n}\n\nexercise.addSetup(function (mode, callback) {\n  // mode == 'run' || 'verify'\n\n  // create a random batch of cmdline args\n  var args = [ rndint(), rndint() ]\n\n  while (Math.random() > 0.3) {\n    args.push(rndint())\n  }\n\n  // supply the args to the 'execute' processor for both\n  // solution and submission spawn()\n  this.submissionArgs = this.solutionArgs = args\n\n  process.nextTick(callback)\n})\n\nmodule.exports = exercise\n","/home/travis/build/npmtest/node-npmtest-learnyounode/node_modules/learnyounode/exercises/make_it_modular/verify.js":"var fs = require('fs')\nvar path = require('path')\nvar util = require('util')\nvar files = require('../filtered_ls/file-list')\n\nfunction validateModule (modFile, callback) {\n  var exercise = this\n  var __ = this.__\n  var __n = this.__n\n  var dir = this._testDir\n  var mod\n  var error = new Error('testing')\n  var returned = false\n  var _callback = callback\n  var callbackUsed\n\n  try {\n    mod = require(modFile)\n  } catch (e) {\n    exercise.emit('fail', __('fail.loadError', { message: e.message, path: path.basename(modFile) }))\n    return callback(null, false)\n  }\n\n  callback = function () {\n    returned = true\n    _callback.apply(this, arguments)\n  }\n\n  function modFileError (txt) {\n    exercise.emit('fail', __('fail.mod._base', { path: path.basename(modFile), message: txt }))\n    callback(null, false)\n  }\n\n  // ---- Check that our module file is `module.exports = function () {}`\n\n  if (typeof mod !== 'function') {\n    return modFileError(__('fail.mod.no_export'))\n  }\n\n  exercise.emit('pass', __('pass.singleFunction'))\n\n  // ---- Check that the function exported takes 3 arguments\n\n  if (mod.length < 3) {\n    return modFileError(__n('fail.mod.arguments', mod.length))\n  }\n\n  exercise.emit('pass', __n('pass.arguments', mod.length))\n\n  // ---- Mock `fs.readdir` and check that an error bubbles back up through the cb\n\n  fs.$readdir = fs.readdir\n  fs.readdir = function (dir, optionalEncoding, callback) {\n    callback = callback || optionalEncoding\n    callback(error)\n  }\n\n  function noerr () {\n    return modFileError(__('fail.mod.missing_error'))\n  }\n\n  callbackUsed = false\n  try {\n    mod('/foo/bar/', 'wheee', function (err) {\n      if (err !== error) {\n        return noerr()\n      }\n\n      callbackUsed = true\n    })\n  } catch (e) {\n    noerr()\n  }\n\n  if (callbackUsed) {\n    exercise.emit('pass', __('pass.error'))\n  }\n\n  // ---- Check whether the callback is used at all\n\n  setTimeout(function () {\n    if (returned) {\n      return\n    }\n\n    if (!callbackUsed) {\n      return modFileError(__('fail.mod.missing_callback'))\n    }\n\n    exercise.emit('pass', __('pass.callback'))\n\n    // replace the mock readdir\n    fs.readdir = fs.$readdir\n\n    callbackUsed = false\n\n    // a special follow-up for when we detect they are not passing back\n    // the right number of elements--the most common case is that they are\n    // sending in the '.'-prefixed value\n    function checkWithDot () {\n      mod(dir, '.dat', function (err, list) {\n        if (err) {\n          return modFileError(__('fail.mod.callback_error', { error: util.inspect(err) }))\n        }\n        var notexp = files.filter(function (f) { return (/\\.dat$/).test(f) })\n        if (list.length === notexp.length) {\n          return modFileError(__('fail.mod.dont_use_dot'))\n        }\n\n        exercise.emit('pass', __('pass.dont_use_dot'))\n        // else ... no idea what went wrong here!\n        modFileError(__('fail.mod.array_wrong_size'))\n      })\n    }\n\n    try {\n      mod(dir, 'md', function (err, list) {\n        if (err) {\n          return modFileError(__('fail.mod.callback_error', { error: util.inspect(err) }))\n        }\n\n        // ---- Check that we got the correct number of elements\n        if (arguments.length < 2) {\n          return modFileError(__n('fail.mod.callback_arguments', arguments.length))\n        }\n\n        exercise.emit('pass', __('pass.callback_arguments'))\n\n        // ---- Check that we got an Array as the second argument\n        if (!Array.isArray(list)) {\n          return modFileError(__('fail.mod.missing_array_argument'))\n        }\n\n        exercise.emit('pass', __('pass.array_argument'))\n\n        var exp = files.filter(function (f) { return (/\\.md$/).test(f) })\n        var noDotExp = files.filter(function (f) { return (/md$/).test(f) })\n        var i\n\n        // ---- Check for `ext` instead of `.ext`\n        if (noDotExp.length === list.length) {\n          return modFileError(__('fail.mod.dotExt'))\n        }\n\n        // ---- Check that we got the expected number of elements in the Array\n        if (exp.length !== list.length) {\n          return checkWithDot()\n        }\n\n        exercise.emit('pass', __('pass.dont_use_dot'))\n        exercise.emit('pass', __('pass.array_size'))\n\n        callbackUsed = true\n\n        // ---- Check that the elements are exactly the same as expected (ignoring order)\n        exp.sort()\n        list.sort()\n        for (i = 0; i < exp.length; i++) {\n          if (list[i] !== exp[i]) {\n            return modFileError(__('fail.mod.array_comparison'))\n          }\n        }\n\n        exercise.emit('pass', __('pass.final'))\n\n        // WIN!!\n        callback()\n      })\n    } catch (e) {\n      return modFileError(__('fail.mod.unexpected', { error: util.inspect(e) }))\n    }\n\n    setTimeout(function () {\n      if (returned) {\n        return\n      }\n\n      if (!callbackUsed) {\n        return modFileError(__('fail.mod.timeout'))\n      }\n    }, 300)\n  }, 300)\n}\n\n// find any modules that are required by the submission program\n\nfunction requires (exercise) {\n  // rule out these 4 things\n  var main = path.resolve(process.cwd(), exercise.args[0])\n  var exec = require.resolve('workshopper-wrappedexec/exec-wrap')\n  var wrap1 = require.resolve('../my_first_io/wrap')\n  var wrap2 = require.resolve('./wrap-requires')\n\n  return exercise.wrapData.requires.filter(function (m) {\n    return m !== main && m !== exec && m !== wrap1 && m !== wrap2\n  })\n}\n\nfunction verifyModuleUsed (callback) {\n  var required = requires(this)\n\n  if (required.length === 0) {\n    this.emit('fail', this.__('fail.missing_module'))\n    return callback(null, false)\n  }\n\n  validateModule.call(this, required[0], callback)\n}\n\nfunction verify (callback) {\n  Object.keys(this.wrapData.fsCalls).forEach(function (m) {\n    if (/Sync$/.test(m)) {\n      this.emit('fail', this.__('fail.sync', { method: 'fs.' + m + '()' }))\n    } else {\n      this.emit('pass', this.__('pass.async', { method: 'fs.' + m + '()' }))\n    }\n  }.bind(this))\n\n  verifyModuleUsed.call(this, callback)\n}\n\nmodule.exports = verify\n","/home/travis/build/npmtest/node-npmtest-learnyounode/node_modules/learnyounode/exercises/make_it_modular/wrap-requires.js":"function finish (ctx) {\n  ctx.requires = Object.keys(require.cache)\n}\n\nmodule.exports.finish = finish\n","/home/travis/build/npmtest/node-npmtest-learnyounode/node_modules/learnyounode/exercises/my_first_io/wrap.js":"var fs = require('fs')\n\nfunction wrap (ctx) {\n  ctx.fsCalls = {}\n\n  // wrap app fs calls\n  Object.keys(fs).forEach(function (m) {\n    var orig = fs[m]\n\n    fs[m] = function () {\n      // $captureStack is a utility to capture a stacktrace array\n      var stack = ctx.$captureStack(fs[m])\n\n      // inspect the first callsite of the stacktrace and see if the\n      // filename matches the mainProgram we're running, if so, then\n      // the user has used the method in question\n      // the substring() is necessary as the user doesn't have to provide\n      // a .js extension to make it work\n\n      if (stack[0].getFileName().substring(0, ctx.mainProgram.length) === ctx.mainProgram) {\n        if (!ctx.fsCalls[m]) {\n          ctx.fsCalls[m] = 1\n        } else {\n          ctx.fsCalls[m]++\n        }\n      }\n\n      // call the real fs.readFileSync\n\n      return orig.apply(this, arguments)\n    }\n  })\n}\n\nmodule.exports = wrap\n","/home/travis/build/npmtest/node-npmtest-learnyounode/node_modules/learnyounode/exercises/baby_steps/solution/solution.js":"var result = 0\n\nfor (var i = 2; i < process.argv.length; i++) {\n  result += Number(process.argv[i])\n}\n\nconsole.log(result)\n","/home/travis/build/npmtest/node-npmtest-learnyounode/node_modules/learnyounode/exercises/make_it_modular/solution/solution_filter.js":"var fs = require('fs')\nvar path = require('path')\n\nmodule.exports = function (dir, filterStr, callback) {\n  fs.readdir(dir, function (err, list) {\n    if (err) {\n      return callback(err)\n    }\n\n    list = list.filter(function (file) {\n      return path.extname(file) === '.' + filterStr\n    })\n\n    callback(null, list)\n  })\n}\n"}